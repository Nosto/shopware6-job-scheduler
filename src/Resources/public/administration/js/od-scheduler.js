!function(n){var e={};function t(l){if(e[l])return e[l].exports;var i=e[l]={i:l,l:!1,exports:{}};return n[l].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,l){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:l})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var l=Object.create(null);if(t.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(l,i,function(e){return n[e]}.bind(null,i));return l},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/bundles/odscheduler/",t(t.s="2FdZ")}({"+tzr":function(n){n.exports=JSON.parse('{"job-listing":{"general":{"title":"Job Listing Pages","description":"job-listing"},"menu":{"title":"Job Listing"},"page":{"listing":{"title":"Job Listing","description":"List of Jobs","grid":{"job-status":{"succeed":"Success","error":"Failed","pending":"Pending","running":"Running"},"column":{"type":"Type","status":"Status","name":"Name","started-at":"Started at","finished-at":"Finished at","created-at":"Created at"},"message-modal":{"label":"Job Messages"}}},"detail":{"textHeadline":"Job","jobChildrenTitle":"Job Children"}},"actions":{"reschedule-job":{"button":{"label":"Reschedule Job"}},"delete-job":{"button":{"label":"Delete Job"}},"view-job":{"button":{"label":"View Job"}},"show-messages":{"button":{"label":"Show Messages"}}}}}')},"/k7a":function(n,e,t){var l=t("liS9");"string"==typeof l&&(l=[[n.i,l,""]]),l.locals&&(n.exports=l.locals);(0,t("SZ7m").default)("4c423c6c",l,!0,{})},"1+Xl":function(n,e){n.exports='<sw-color-badge rounded\n                :variant="variant"\n                :class="additionalClass"\n                style="margin-right: 10px; margin-top: 3px;">\n</sw-color-badge>\n\n'},"1jbx":function(n,e){n.exports='{% block sw_data_grid_slot_pagination %}\n    <sw-pagination v-if="!isGroupedView"\n            v-bind="{ page, limit, total, steps }"\n            :total-visible="7"\n            @page-change="paginate"\n    />\n{% endblock %}\n\n{% block sw_data_grid_bulk_selected_actions_content %}\n    {% block sw_data_grid_bulk_edit_content %}\n        \x3c!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events --\x3e\n        <a\n                v-if="allowBulkEdit"\n                class="link link-primary"\n                @click="onClickBulkEdit"\n        >\n            {{ $tc(\'global.sw-bulk-edit-modal.bulkEdit\') }}\n        </a>\n    {% endblock %}\n\n    {% block sw_data_grid_bulk_delete_content %}\n        \x3c!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events --\x3e\n        <a\n                v-if="allowDelete"\n                class="link link-danger"\n                @click="showBulkDeleteModal = true"\n        >\n            {{ $tc(\'global.default.delete\') }}\n        </a>\n    {% endblock %}\n{% endblock %}\n\n{% block sw_data_grid_slot_bulk_modals %}\n    {% block sw_data_grid_bulk_edit_modal %}\n        <slot\n                name="bulk-edit-modal"\n                v-bind="{ selection }"\n        >\n            {% block sw_data_grid_slot_bulk_edit_modal %}\n                <sw-bulk-edit-modal\n                        v-if="showBulkEditModal"\n                        :selection="selection"\n                        :bulk-grid-edit-columns="bulkGridEditColumns"\n                        @modal-close="onCloseBulkEditModal"\n                />\n            {% endblock %}\n        </slot>\n    {% endblock %}\n\n    {% block sw_data_grid_bulk_delete_modal %}\n        <sw-modal\n                v-if="showBulkDeleteModal"\n                variant="small"\n                :title="$tc(\'global.default.warning\')"\n                @modal-close="showBulkDeleteModal = false"\n        >\n            <p class="sw-data-grid__confirm-bulk-delete-text">\n                <slot\n                        name="bulk-modal-delete-confirm-text"\n                        v-bind="{ selectionCount }"\n                >\n                    {{ $tc(\'global.entity-components.deleteMessage\', selectionCount, { count: selectionCount }) }}\n                </slot>\n            </p>\n\n            <template #modal-footer>\n                <slot name="bulk-modal-cancel">\n                    <sw-button\n                            size="small"\n                            @click="showBulkDeleteModal = false"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                </slot>\n\n                <slot\n                        name="bulk-modal-delete-items"\n                        v-bind="{ isBulkLoading, deleteItems }"\n                >\n                    <sw-button\n                            variant="danger"\n                            size="small"\n                            :is-loading="isBulkLoading"\n                            @click="deleteItems"\n                    >\n                        {{ $tc(\'global.default.delete\') }}\n                    </sw-button>\n                </slot>\n            </template>\n        </sw-modal>\n    {% endblock %}\n{% endblock %}\n\n{% block sw_data_grid_slot_actions %}\n    <slot\n            name="detail-action"\n            v-bind="{ item }"\n    >\n        <sw-context-menu-item\n                v-if="detailRoute"\n                v-tooltip="{\n            message: $tc(\'sw-privileges.tooltip.warning\'),\n            disabled: allowEdit || allowView,\n            showOnDisabledElements: true,\n            zIndex: 9050,\n        }"\n                class="sw-entity-listing__context-menu-edit-action"\n                :disabled="!allowEdit && !allowView"\n                :router-link="{ name: detailRoute, params: { id: item.id } }"\n        >\n            {{ detailPageLinkText }}\n        </sw-context-menu-item>\n    </slot>\n\n    <slot\n            name="more-actions"\n            v-bind="{ item }"\n    ></slot>\n\n    <slot\n            name="delete-action"\n            v-bind="{ item, showDelete, allowDelete }"\n    >\n        <sw-context-menu-item\n                v-tooltip.bottom="{\n            message: $tc(\'sw-privileges.tooltip.warning\'),\n            disabled: allowDelete,\n            showOnDisabledElements: true,\n            zIndex: 9050,\n        }"\n                :disabled="!allowDelete"\n                class="sw-entity-listing__context-menu-edit-delete"\n                variant="danger"\n                @click="showDelete(item.id)"\n        >\n            {{ $tc(\'global.default.delete\') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n                class="sw-entity-listing__context-menu-edit-test"\n                variant="info"\n        >\n            Test\n        </sw-context-menu-item>\n    </slot>\n{% endblock %}\n\n{% block sw_data_grid_slot_action_modals %}\n    <sw-modal\n            v-if="deleteId === item.id"\n            :title="$tc(\'global.default.warning\')"\n            variant="small"\n            @modal-close="closeModal"\n    >\n        <p class="sw-listing__confirm-delete-text">\n            <slot\n                    name="delete-confirm-text"\n                    v-bind="{ item }"\n            >\n                {{ $tc(\'global.entity-components.deleteMessage\') }}\n            </slot>\n        </p>\n\n        <template #modal-footer>\n            <slot\n                    name="delete-modal-footer"\n                    v-bind="{ item }"\n            >\n                <slot\n                        name="delete-modal-cancel"\n                        v-bind="{ item }"\n                >\n                    <sw-button\n                            size="small"\n                            @click="closeModal"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                </slot>\n\n                <slot\n                        name="delete-modal-delete-item"\n                        v-bind="{ item }"\n                >\n                    <sw-button\n                            variant="danger"\n                            size="small"\n                            @click="deleteItem(item.id)"\n                    >\n                        {{ $tc(\'global.default.delete\') }}\n                    </sw-button>\n                </slot>\n            </slot>\n        </template>\n    </sw-modal>\n\n\n{% endblock %}\n\n  {% block sw_data_grid_select_item_checkbox %}\n      <sw-checkbox-field\n              v-if="canDelete(item)"\n              :disabled="!isRecordSelectable(item)"\n              :value="isSelected(item[itemIdentifierProperty])"\n              @change="selectItem($event, item)"\n      />\n  {% endblock %}\n\n\n{% block sw_data_grid_table %}\n    <table v-if="!isGroupedView"\n            ref="table"\n            class="sw-data-grid__table"\n    >\n\n        {% block sw_data_grid_header %}\n            <thead\n                    v-if="showHeader"\n                    class="sw-data-grid__header"\n            >\n\n            {% block sw_data_grid_header_row %}\n                <tr class="sw-data-grid__row">\n\n                    {% block sw_data_grid_header_cell_selection %}\n                        <th\n                                v-if="showSelection"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection"\n                        >\n                            {% block sw_data_grid_header_cell_selection_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_select_all_checkbox %}\n                                        <sw-checkbox-field\n                                                v-if="records && records.length > 0"\n                                                :disabled="isSelectAllDisabled"\n                                                class="sw-data-grid__select-all"\n                                                :value="allSelectedChecked"\n                                                @change="selectAll"\n                                        />\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n                    {% endblock %}\n\n                    {% block sw_data_grid_header_columns %}\n                        <th\n                                v-for="(column, columnIndex) in currentColumns"\n                                v-show="column.visible"\n                                :key="`${column.property}-${columnIndex}`"\n                                ref="column"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property"\n                                :class="getHeaderCellClasses(column, columnIndex)"\n                                :style="{ width: column.width, minWidth: column.width }"\n                                @click="onClickHeaderCell($event, column)"\n                        >\n\n                            {% block sw_data_grid_header_columns_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    <slot\n                                            :name="`column-label-${column.property}`"\n                                            v-bind="{ column, columnIndex }"\n                                    >\n\n                                        {% block sw_data_grid_header_columns_icon %}\n                                            <sw-icon\n                                                    v-if="column.iconLabel"\n                                                    :name="column.iconLabel"\n                                            >\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </sw-icon>\n                                        {% endblock %}\n\n                                        {% block sw_data_grid_header_columns_label %}\n                                            <template v-else>\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </template>\n                                        {% endblock %}\n                                    </slot>\n\n                                    {% block sw_data_grid_column_actions %}\n                                        <sw-context-button\n                                                v-if="allowColumnEdit && !isInlineEditActive"\n                                                class="sw-data-grid__action-edit-column"\n                                        >\n                                            {% block sw_data_grid_column_actions_hide %}\n                                                <sw-context-menu-item\n                                                        :disabled="column.primary"\n                                                        variant="danger"\n                                                        @click="hideColumn(columnIndex)"\n                                                >\n                                                    {{ $tc(\'global.sw-data-grid.labelColumnHide\') }}\n                                                </sw-context-menu-item>\n                                            {% endblock %}\n                                        </sw-context-button>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_sort_indicator %}\n                                        <span\n                                                v-if="column.sortable && currentSortBy === column.dataIndex"\n                                                class="sw-data-grid__sort-indicator"\n                                        >\n                                {% block sw_data_grid_sort_indicator_transition %}\n                                    <transition\n                                            name="sort-indicator"\n                                            mode="out-in"\n                                    >\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\n                                        <sw-icon\n                                                v-if="currentSortDirection === \'ASC\'"\n                                                key="ASC"\n                                                name="small-arrow-small-up"\n                                                size="16px"\n                                        />\n                                    {% endblock %}\n\n                                        {% block sw_data_grid_sort_indicator_icon_desc %}\n                                            <sw-icon\n                                                    v-else\n                                                    key="DESC"\n                                                    name="small-arrow-small-down"\n                                                    size="16px"\n                                            />\n                                        {% endblock %}\n                                </transition>\n                                {% endblock %}\n                            </span>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_data_grid_header_columns_resize %}\n                                <span\n                                        v-if="column.allowResize"\n                                        class="sw-data-grid__cell-resize"\n                                        @mousedown="onStartResize($event, column, columnIndex)"\n                                ></span>\n                            {% endblock %}\n                        </th>\n                    {% endblock %}\n\n                    {% block sw_data_grid_header_cell_spacer %}\n                        <th\n                                v-if="hasResizeColumns"\n                                aria-hidden="true"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </th>\n                    {% endblock %}\n\n                    {% block sw_data_grid_header_cell_actions %}\n                        <th\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings"\n                                :class="{ \'is--loading\': loading }"\n                        >\n                            {% block sw_data_grid_header_cell_actions_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_settings %}\n                                        <sw-data-grid-settings\n                                                v-if="showSettings"\n                                                :columns="currentColumns"\n                                                :compact="compact"\n                                                :previews="previews"\n                                                :enable-previews="hasPreviewSlots"\n                                                :disabled="isInlineEditActive"\n                                                @change-compact-mode="onChangeCompactMode"\n                                                @change-preview-images="onChangePreviews"\n                                                @change-column-visibility="onChangeColumnVisibility"\n                                                @change-column-order="onChangeColumnOrder"\n                                        >\n                                            {% block sw_data_grid_settings_additional_settings %}\n                                                <template #additionalSettings>\n                                                    {% block sw_data_grid_settings_additional_settings_inner %}\n                                                        <slot name="additionalSettings"></slot>\n                                                    {% endblock %}\n                                                </template>\n                                            {% endblock %}\n                                        </sw-data-grid-settings>\n\n                                        {% block sw_data_grid_settings_custom_settings %}\n                                            <slot name="customSettings">\n                                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\n                                            </slot>\n                                        {% endblock %}\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n                    {% endblock %}\n                </tr>\n            {% endblock %}\n            </thead>\n        {% endblock %}\n\n        {% block sw_data_grid_body %}\n            <tbody\n                    v-if="!loading"\n                    class="sw-data-grid__body"\n            >\n\n            {% block sw_data_grid_body_row %}\n                <tr\n                        v-for="(item, itemIndex) in records"\n                        :key="item.id"\n                        class="sw-data-grid__row"\n                        :class="getRowClasses(item, itemIndex)"\n                >\n\n                    {% block sw_data_grid_body_cell_selection %}\n                        <td\n                                v-if="showSelection"\n                                class="sw-data-grid__cell sw-data-grid__cell--selection"\n                        >\n                            <slot\n                                    name="selection-content"\n                                    v-bind="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }"\n                            >\n                                {% block sw_data_grid_body_cell_selection_content %}\n                                    <div class="sw-data-grid__cell-content">\n                                        {% block sw_data_grid_select_item_checkbox %}\n                                            <sw-checkbox-field v-if="canDelete(item)"\n                                                    :disabled="!isRecordSelectable(item)"\n                                                    :value="isSelected(item[itemIdentifierProperty])"\n                                                    @change="selectItem($event, item)"\n                                            />\n                                        {% endblock %}\n                                    </div>\n                                {% endblock %}\n                            </slot>\n                        </td>\n                    {% endblock %}\n\n                    {% block sw_data_grid_body_columns %}\n                        <td\n                                v-for="(column, columnIndex) in currentColumns"\n                                v-show="column.visible"\n                                :key="`${item.id}-${columnIndex}`"\n                                class="sw-data-grid__cell"\n                                :class="getCellClasses(column)"\n                                @dblclick="onDbClickCell(item)"\n                        >\n\n                            {% block sw_data_grid_body_columns_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    {% block sw_data_grid_preview_slot %}\n                                        <slot\n                                                v-if="previews && !isInlineEdit(item)"\n                                                :name="`preview-${column.property}`"\n                                                v-bind="{ item, column, compact }"\n                                        ></slot>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_columns_slot %}\n                                        <slot\n                                                :name="`column-${column.property}`"\n                                                v-bind="{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')) }"\n                                        >\n                                            <template v-if="column.inlineEdit === \'boolean\'">\n                                                {% block sw_data_grid_columns_boolean %}\n                                                    <sw-data-grid-column-boolean\n                                                            v-model="item[column.property]"\n                                                            :is-inline-edit="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')"\n                                                    />\n                                                {% endblock %}\n                                            </template>\n                                            <template v-else>\n                                                {% block sw_data_grid_columns_inline_edit %}\n                                                    <template v-if="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')">\n                                                        {% block sw_data_grid_columns_render_inline_edit %}\n                                                            <sw-data-grid-inline-edit\n                                                                    :column="column"\n                                                                    :compact="compact"\n                                                                    :value="item[column.property]"\n                                                                    @input="item[column.property] = $event"\n                                                            />\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n\n                                                {% block sw_data_grid_columns_value %}\n                                                    <template v-else>\n                                                        {% block sw_data_grid_columns_render_router_link %}\n                                                            <router-link\n                                                                    v-if="column.routerLink"\n                                                                    class="sw-data-grid__cell-value"\n                                                                    :to="{ name: column.routerLink, params: { id: item.id } }"\n                                                            >\n                                                                {{ renderColumn(item, column) }}\n                                                            </router-link>\n                                                        {% endblock %}\n                                                        {% block sw_data_grid_columns_render_value %}\n                                                            <span\n                                                                    v-else\n                                                                    class="sw-data-grid__cell-value"\n                                                            >\n                                            {{ renderColumn(item, column) }}\n                                        </span>\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n                                            </template>\n                                        </slot>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </td>\n                    {% endblock %}\n\n                    {% block sw_data_grid_body_cell_spacer %}\n                        <td\n                                v-if="hasResizeColumns"\n                                aria-hidden="true"\n                                class="sw-data-grid__cell sw-data-grid__cell-spacer"\n                                @dblclick="onDbClickCell(item)"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </td>\n                    {% endblock %}\n\n                    {% block sw_data_grid_body_cell_actions %}\n                        <td\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--actions"\n                        >\n                            {% block sw_data_grid_body_cell_actions_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    {% block sw_data_grid_inline_edit_actions %}\n                                        <template v-if="isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]">\n\n                                            {% block sw_data_grid_inline_edit_actions_cancel %}\n                                                <sw-button\n                                                        class="sw-data-grid__inline-edit-cancel"\n                                                        size="x-small"\n                                                        :title="$tc(\'global.default.cancel\')"\n                                                        :aria-label="$tc(\'global.default.cancel\')"\n                                                        square\n                                                        @click="onClickCancelInlineEdit(item)"\n                                                >\n                                                    {% block sw_data_grid_inline_edit_actions_cancel_icon %}\n                                                        <sw-icon\n                                                                name="small-default-x-line-small"\n                                                                size="14px"\n                                                        />\n                                                    {% endblock %}\n                                                </sw-button>\n                                            {% endblock %}\n\n                                            {% block sw_data_grid_inline_edit_actions_save %}\n                                                <sw-button\n                                                        class="sw-data-grid__inline-edit-save"\n                                                        variant="primary"\n                                                        size="x-small"\n                                                        :title="$tc(\'global.default.save\')"\n                                                        :aria-label="$tc(\'global.default.save\')"\n                                                        square\n                                                        @click="onClickSaveInlineEdit(item)"\n                                                >\n                                                    {% block sw_data_grid_inline_edit_actions_save_icon %}\n                                                        <sw-icon\n                                                                name="small-default-checkmark-line-small"\n                                                                size="14px"\n                                                        />\n                                                    {% endblock %}\n                                                </sw-button>\n                                            {% endblock %}\n                                        </template>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_body_cell_actions_menu %}\n                                        <sw-context-button\n                                                v-else\n                                                class="sw-data-grid__actions-menu"\n                                        >\n                                            <slot\n                                                    name="actions"\n                                                    :item="item"\n                                                    :itemIndex="itemIndex"\n                                            >\n                                                {% block sw_data_grid_slot_actions %}{% endblock %}\n                                            </slot>\n                                        </sw-context-button>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_body_cell_action_modals %}\n                                        <slot\n                                                name="action-modals"\n                                                :item="item"\n                                        >\n                                            {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                                        </slot>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </td>\n                    {% endblock %}\n                </tr>\n            {% endblock %}\n            </tbody>\n        {% endblock %}\n\n        {% block sw_data_grid_skeleton %}\n            <sw-data-grid-skeleton\n                    v-else\n                    :show-selection="showSelection"\n                    :show-actions="showActions"\n                    :current-columns="currentColumns"\n                    :has-resize-columns="hasResizeColumns"\n                    :item-amount="skeletonItemAmount"\n                    class="sw-data-grid__body"\n            />\n        {% endblock %}\n    </table>\n    <div v-if="isGroupedView" class="scheduler-grouped-view">\n        <sw-collapse class="success-collapse" v-if="successItems">\n            <template #header>Succeed ({{ successItems.length }})</template>\n            <template #content>\n                    <table ref="table"\n                           class="sw-data-grid__table">\n                            <thead v-if="showHeader"\n                                    class="sw-data-grid__header">\n                                <tr class="sw-data-grid__row">\n                                        <th\n                                                v-if="showSelection"\n                                                class="is-select-all sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection"\n                                        >\n                                                <div class="sw-data-grid__cell-content">\n                                                        <sw-checkbox-field\n                                                                v-if="records && records.length > 0"\n                                                                class="sw-data-grid__select-all"\n                                                                :value="allSelectedChecked"\n                                                                @change="selectAll"\n                                                        />\n                                                </div>\n                                        </th>\n\n                                        <th\n                                                v-for="(column, columnIndex) in currentColumns"\n                                                v-show="column.visible"\n                                                :key="`${column.property}-${columnIndex}`"\n                                                ref="column"\n                                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property"\n                                                :class="getHeaderCellClasses(column, columnIndex)"\n                                                :style="{ width: column.width, minWidth: column.width }"\n                                                @click="onClickHeaderCell($event, column)"\n                                        >\n\n                                            {% block sw_data_grid_header_columns_content %}\n                                                <div class="sw-data-grid__cell-content">\n\n                                                    <slot\n                                                            :name="`column-label-${column.property}`"\n                                                            v-bind="{ column, columnIndex }"\n                                                    >\n\n                                                        {% block sw_data_grid_header_columns_icon %}\n                                                            <sw-icon\n                                                                    v-if="column.iconLabel"\n                                                                    :name="column.iconLabel"\n                                                            >\n                                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                                            </sw-icon>\n                                                        {% endblock %}\n\n                                                        {% block sw_data_grid_header_columns_label %}\n                                                            <template v-else>\n                                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                                            </template>\n                                                        {% endblock %}\n                                                    </slot>\n\n                                                    {% block sw_data_grid_column_actions %}\n                                                        <sw-context-button\n                                                                v-if="allowColumnEdit && !isInlineEditActive"\n                                                                class="sw-data-grid__action-edit-column"\n                                                        >\n                                                            {% block sw_data_grid_column_actions_hide %}\n                                                                <sw-context-menu-item\n                                                                        :disabled="column.primary"\n                                                                        variant="danger"\n                                                                        @click="hideColumn(columnIndex)"\n                                                                >\n                                                                    {{ $tc(\'global.sw-data-grid.labelColumnHide\') }}\n                                                                </sw-context-menu-item>\n                                                            {% endblock %}\n                                                        </sw-context-button>\n                                                    {% endblock %}\n\n                                                    {% block sw_data_grid_sort_indicator %}\n                                                        <span\n                                                                v-if="column.sortable && currentSortBy === column.dataIndex"\n                                                                class="sw-data-grid__sort-indicator"\n                                                        >\n                                {% block sw_data_grid_sort_indicator_transition %}\n                                    <transition\n                                            name="sort-indicator"\n                                            mode="out-in"\n                                    >\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\n                                        <sw-icon\n                                                v-if="currentSortDirection === \'ASC\'"\n                                                key="ASC"\n                                                name="small-arrow-small-up"\n                                                size="16px"\n                                        />\n                                    {% endblock %}\n\n                                        {% block sw_data_grid_sort_indicator_icon_desc %}\n                                            <sw-icon\n                                                    v-else\n                                                    key="DESC"\n                                                    name="small-arrow-small-down"\n                                                    size="16px"\n                                            />\n                                        {% endblock %}\n                                </transition>\n                                {% endblock %}\n                            </span>\n                                                    {% endblock %}\n                                                </div>\n                                            {% endblock %}\n\n                                            {% block sw_data_grid_header_columns_resize %}\n                                                <span\n                                                        v-if="column.allowResize"\n                                                        class="sw-data-grid__cell-resize"\n                                                        @mousedown="onStartResize($event, column, columnIndex)"\n                                                ></span>\n                                            {% endblock %}\n                                        </th>\n\n                                        <th\n                                                v-if="hasResizeColumns"\n                                                aria-hidden="true"\n                                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer"\n                                        >\n                                            <div class="sw-data-grid__cell-content"></div>\n                                        </th>\n\n                                        <th\n                                                v-if="showActions"\n                                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings"\n                                                :class="{ \'is--loading\': loading }"\n                                        >\n                                            {% block sw_data_grid_header_cell_actions_content %}\n                                                <div class="sw-data-grid__cell-content">\n                                                    {% block sw_data_grid_settings %}\n                                                        <sw-data-grid-settings\n                                                                v-if="showSettings"\n                                                                :columns="currentColumns"\n                                                                :compact="compact"\n                                                                :previews="previews"\n                                                                :enable-previews="hasPreviewSlots"\n                                                                :disabled="isInlineEditActive"\n                                                                @change-compact-mode="onChangeCompactMode"\n                                                                @change-preview-images="onChangePreviews"\n                                                                @change-column-visibility="onChangeColumnVisibility"\n                                                                @change-column-order="onChangeColumnOrder"\n                                                        >\n                                                            {% block sw_data_grid_settings_additional_settings %}\n                                                                <template #additionalSettings>\n                                                                    {% block sw_data_grid_settings_additional_settings_inner %}\n                                                                        <slot name="additionalSettings"></slot>\n                                                                    {% endblock %}\n                                                                </template>\n                                                            {% endblock %}\n                                                        </sw-data-grid-settings>\n\n                                                        {% block sw_data_grid_settings_custom_settings %}\n                                                            <slot name="customSettings">\n                                                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\n                                                            </slot>\n                                                        {% endblock %}\n                                                    {% endblock %}\n                                                </div>\n                                            {% endblock %}\n                                        </th>\n                                </tr>\n                            </thead>\n\n                            <tbody v-if="!loading"\n                                    class="sw-data-grid__body">\n\n                                <tr v-for="(item, itemIndex) in successItems"\n                                        :key="item.id"\n                                        class="sw-data-grid__row"\n                                        :class="getRowClasses(item, itemIndex)">\n\n\n                                        <td v-if="showSelection"\n                                            class="is-select-all sw-data-grid__cell sw-data-grid__cell--selection">\n                                            <slot name="selection-content"\n                                                    v-bind="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }">\n                                                    <div class="sw-data-grid__cell-content">\n                                                            <sw-checkbox-field v-if="canDelete(item)"\n                                                                    :disabled="!isRecordSelectable(item)"\n                                                                    :value="isSelected(item[itemIdentifierProperty])"\n                                                                    @change="selectItem($event, item)"\n                                                            />\n                                                    </div>\n                                            </slot>\n                                        </td>\n\n                                        <td v-for="(column, columnIndex) in currentColumns"\n                                                v-show="column.visible"\n                                                :key="`${item.id}-${columnIndex}`"\n                                                class="sw-data-grid__cell"\n                                                :class="getCellClasses(column)"\n                                                @dblclick="onDbClickCell(item)">\n\n                                                <div class="sw-data-grid__cell-content">\n\n                                                        <slot v-if="previews && !isInlineEdit(item)"\n                                                                :name="`preview-${column.property}`"\n                                                                v-bind="{ item, column, compact }"\n                                                        ></slot>\n\n                                                        <slot :name="`column-${column.property}`"\n                                                              v-bind="{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')) }">\n                                                            <template v-if="column.inlineEdit === \'boolean\'">\n                                                                    <sw-data-grid-column-boolean\n                                                                            v-model="item[column.property]"\n                                                                            :is-inline-edit="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')"\n                                                                    />\n                                                            </template>\n                                                            <template v-else>\n                                                                    <template v-if="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')">\n                                                                            <sw-data-grid-inline-edit\n                                                                                    :column="column"\n                                                                                    :compact="compact"\n                                                                                    :value="item[column.property]"\n                                                                                    @input="item[column.property] = $event"\n                                                                            />\n                                                                    </template>\n\n                                                                    <template v-else>\n                                                                            <router-link\n                                                                                    v-if="column.routerLink"\n                                                                                    class="sw-data-grid__cell-value"\n                                                                                    :to="{ name: column.routerLink, params: { id: item.id } }"\n                                                                            >\n                                                                                {{ renderColumn(item, column) }}\n                                                                            </router-link>\n                                                                            <span v-else class="sw-data-grid__cell-value">\n                                                                                {{ renderColumn(item, column) }}\n                                                                            </span>\n                                                                    </template>\n                                                            </template>\n                                                        </slot>\n                                                </div>\n                                        </td>\n                                        <td v-if="hasResizeColumns"\n                                                aria-hidden="true"\n                                                class="sw-data-grid__cell sw-data-grid__cell-spacer"\n                                                @dblclick="onDbClickCell(item)"\n                                        >\n                                            <div class="sw-data-grid__cell-content"></div>\n                                        </td>\n\n                                        <td\n                                                v-if="showActions"\n                                                class="sw-data-grid__cell sw-data-grid__cell--actions"\n                                        >\n                                                <div class="sw-data-grid__cell-content">\n\n                                                        <template v-if="isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]">\n\n                                                                <sw-button\n                                                                        class="sw-data-grid__inline-edit-cancel"\n                                                                        size="x-small"\n                                                                        :title="$tc(\'global.default.cancel\')"\n                                                                        :aria-label="$tc(\'global.default.cancel\')"\n                                                                        square\n                                                                        @click="onClickCancelInlineEdit(item)"\n                                                                >\n                                                                        <sw-icon\n                                                                                name="small-default-x-line-small"\n                                                                                size="14px"\n                                                                        />\n\n                                                                </sw-button>\n\n                                                                <sw-button\n                                                                        class="sw-data-grid__inline-edit-save"\n                                                                        variant="primary"\n                                                                        size="x-small"\n                                                                        :title="$tc(\'global.default.save\')"\n                                                                        :aria-label="$tc(\'global.default.save\')"\n                                                                        square\n                                                                        @click="onClickSaveInlineEdit(item)"\n                                                                >\n\n                                                                        <sw-icon\n                                                                                name="small-default-checkmark-line-small"\n                                                                                size="14px"\n                                                                        />\n                                                                </sw-button>\n                                                        </template>\n\n                                                        <sw-context-button\n                                                                v-else\n                                                                class="sw-data-grid__actions-menu"\n                                                        >\n                                                            <slot\n                                                                    name="actions"\n                                                                    :item="item"\n                                                                    :itemIndex="itemIndex"\n                                                            >\n                                                                {% block sw_data_grid_slot_actions %}{% endblock %}\n                                                            </slot>\n                                                        </sw-context-button>\n                                                        <slot\n                                                                name="action-modals"\n                                                                :item="item"\n                                                        >\n                                                            {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                                                        </slot>\n                                                </div>\n                                        </td>\n                                </tr>\n                            </tbody>\n\n                            <sw-data-grid-skeleton\n                                    v-else\n                                    :show-selection="showSelection"\n                                    :show-actions="showActions"\n                                    :current-columns="currentColumns"\n                                    :has-resize-columns="hasResizeColumns"\n                                    :item-amount="skeletonItemAmount"\n                                    class="sw-data-grid__body"\n                            />\n                    </table>\n            </template>\n        </sw-collapse>\n\n        <sw-collapse class="error-collapse" v-if="errorItems">\n            <template #header>Error ({{ errorItems.length }})</template>\n            <template #content>\n                <table ref="table"\n                       class="sw-data-grid__table">\n                    <thead v-if="showHeader"\n                           class="sw-data-grid__header">\n                    <tr class="sw-data-grid__row">\n                        <th\n                                v-if="showSelection"\n                                class=" is-select-allsw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection"\n                        >\n                            {% block sw_data_grid_header_cell_selection_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_select_all_checkbox %}\n                                        <sw-checkbox-field\n                                                v-if="records && records.length > 0"\n                                                :disabled="isSelectAllDisabled"\n                                                class="sw-data-grid__select-all"\n                                                :value="allSelectedChecked"\n                                                @change="selectAll"\n                                        />\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n\n                        <th\n                                v-for="(column, columnIndex) in currentColumns"\n                                v-show="column.visible"\n                                :key="`${column.property}-${columnIndex}`"\n                                ref="column"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property"\n                                :class="getHeaderCellClasses(column, columnIndex)"\n                                :style="{ width: column.width, minWidth: column.width }"\n                                @click="onClickHeaderCell($event, column)"\n                        >\n\n                            {% block sw_data_grid_header_columns_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    <slot\n                                            :name="`column-label-${column.property}`"\n                                            v-bind="{ column, columnIndex }"\n                                    >\n\n                                        {% block sw_data_grid_header_columns_icon %}\n                                            <sw-icon\n                                                    v-if="column.iconLabel"\n                                                    :name="column.iconLabel"\n                                            >\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </sw-icon>\n                                        {% endblock %}\n\n                                        {% block sw_data_grid_header_columns_label %}\n                                            <template v-else>\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </template>\n                                        {% endblock %}\n                                    </slot>\n\n                                    {% block sw_data_grid_column_actions %}\n                                        <sw-context-button\n                                                v-if="allowColumnEdit && !isInlineEditActive"\n                                                class="sw-data-grid__action-edit-column"\n                                        >\n                                            {% block sw_data_grid_column_actions_hide %}\n                                                <sw-context-menu-item\n                                                        :disabled="column.primary"\n                                                        variant="danger"\n                                                        @click="hideColumn(columnIndex)"\n                                                >\n                                                    {{ $tc(\'global.sw-data-grid.labelColumnHide\') }}\n                                                </sw-context-menu-item>\n                                            {% endblock %}\n                                        </sw-context-button>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_sort_indicator %}\n                                        <span\n                                                v-if="column.sortable && currentSortBy === column.dataIndex"\n                                                class="sw-data-grid__sort-indicator"\n                                        >\n                                {% block sw_data_grid_sort_indicator_transition %}\n                                    <transition\n                                            name="sort-indicator"\n                                            mode="out-in"\n                                    >\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\n                                        <sw-icon\n                                                v-if="currentSortDirection === \'ASC\'"\n                                                key="ASC"\n                                                name="small-arrow-small-up"\n                                                size="16px"\n                                        />\n                                    {% endblock %}\n\n                                        {% block sw_data_grid_sort_indicator_icon_desc %}\n                                            <sw-icon\n                                                    v-else\n                                                    key="DESC"\n                                                    name="small-arrow-small-down"\n                                                    size="16px"\n                                            />\n                                        {% endblock %}\n                                </transition>\n                                {% endblock %}\n                            </span>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_data_grid_header_columns_resize %}\n                                <span\n                                        v-if="column.allowResize"\n                                        class="sw-data-grid__cell-resize"\n                                        @mousedown="onStartResize($event, column, columnIndex)"\n                                ></span>\n                            {% endblock %}\n                        </th>\n\n                        <th\n                                v-if="hasResizeColumns"\n                                aria-hidden="true"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </th>\n\n                        <th\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings"\n                                :class="{ \'is--loading\': loading }"\n                        >\n                            {% block sw_data_grid_header_cell_actions_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_settings %}\n                                        <sw-data-grid-settings\n                                                v-if="showSettings"\n                                                :columns="currentColumns"\n                                                :compact="compact"\n                                                :previews="previews"\n                                                :enable-previews="hasPreviewSlots"\n                                                :disabled="isInlineEditActive"\n                                                @change-compact-mode="onChangeCompactMode"\n                                                @change-preview-images="onChangePreviews"\n                                                @change-column-visibility="onChangeColumnVisibility"\n                                                @change-column-order="onChangeColumnOrder"\n                                        >\n                                            {% block sw_data_grid_settings_additional_settings %}\n                                                <template #additionalSettings>\n                                                    {% block sw_data_grid_settings_additional_settings_inner %}\n                                                        <slot name="additionalSettings"></slot>\n                                                    {% endblock %}\n                                                </template>\n                                            {% endblock %}\n                                        </sw-data-grid-settings>\n\n                                        {% block sw_data_grid_settings_custom_settings %}\n                                            <slot name="customSettings">\n                                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\n                                            </slot>\n                                        {% endblock %}\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n                    </tr>\n                    </thead>\n\n                    <tbody v-if="!loading"\n                           class="sw-data-grid__body">\n\n                    <tr v-for="(item, itemIndex) in errorItems"\n                        :key="item.id"\n                        class="sw-data-grid__row"\n                        :class="getRowClasses(item, itemIndex)">\n\n\n                        <td v-if="showSelection"\n                            class="sw-data-grid__cell sw-data-grid__cell--selection">\n                            <slot name="selection-content"\n                                  v-bind="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }">\n                                <div class="sw-data-grid__cell-content">\n                                    <sw-checkbox-field v-if="canDelete(item)"\n                                            :disabled="!isRecordSelectable(item)"\n                                            :value="isSelected(item[itemIdentifierProperty])"\n                                            @change="selectItem($event, item)"\n                                    />\n                                </div>\n                            </slot>\n                        </td>\n\n                        <td v-for="(column, columnIndex) in currentColumns"\n                            v-show="column.visible"\n                            :key="`${item.id}-${columnIndex}`"\n                            class="sw-data-grid__cell"\n                            :class="getCellClasses(column)"\n                            @dblclick="onDbClickCell(item)">\n\n                            <div class="sw-data-grid__cell-content">\n\n                                <slot v-if="previews && !isInlineEdit(item)"\n                                      :name="`preview-${column.property}`"\n                                      v-bind="{ item, column, compact }"\n                                ></slot>\n\n                                <slot :name="`column-${column.property}`"\n                                      v-bind="{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')) }">\n                                    <template v-if="column.inlineEdit === \'boolean\'">\n                                        <sw-data-grid-column-boolean\n                                                v-model="item[column.property]"\n                                                :is-inline-edit="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')"\n                                        />\n                                    </template>\n                                    <template v-else>\n                                        <template v-if="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')">\n                                            <sw-data-grid-inline-edit\n                                                    :column="column"\n                                                    :compact="compact"\n                                                    :value="item[column.property]"\n                                                    @input="item[column.property] = $event"\n                                            />\n                                        </template>\n\n                                        <template v-else>\n                                            <router-link\n                                                    v-if="column.routerLink"\n                                                    class="sw-data-grid__cell-value"\n                                                    :to="{ name: column.routerLink, params: { id: item.id } }"\n                                            >\n                                                {{ renderColumn(item, column) }}\n                                            </router-link>\n                                            <span v-else class="sw-data-grid__cell-value">\n                                                                                {{ renderColumn(item, column) }}\n                                                                            </span>\n                                        </template>\n                                    </template>\n                                </slot>\n                            </div>\n                        </td>\n                        <td v-if="hasResizeColumns"\n                            aria-hidden="true"\n                            class="sw-data-grid__cell sw-data-grid__cell-spacer"\n                            @dblclick="onDbClickCell(item)"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </td>\n\n                        <td\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--actions"\n                        >\n                            <div class="sw-data-grid__cell-content">\n\n                                <template v-if="isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]">\n\n                                    <sw-button\n                                            class="sw-data-grid__inline-edit-cancel"\n                                            size="x-small"\n                                            :title="$tc(\'global.default.cancel\')"\n                                            :aria-label="$tc(\'global.default.cancel\')"\n                                            square\n                                            @click="onClickCancelInlineEdit(item)"\n                                    >\n                                        <sw-icon\n                                                name="small-default-x-line-small"\n                                                size="14px"\n                                        />\n\n                                    </sw-button>\n\n                                    <sw-button\n                                            class="sw-data-grid__inline-edit-save"\n                                            variant="primary"\n                                            size="x-small"\n                                            :title="$tc(\'global.default.save\')"\n                                            :aria-label="$tc(\'global.default.save\')"\n                                            square\n                                            @click="onClickSaveInlineEdit(item)"\n                                    >\n\n                                        <sw-icon\n                                                name="small-default-checkmark-line-small"\n                                                size="14px"\n                                        />\n                                    </sw-button>\n                                </template>\n\n                                <sw-context-button\n                                        v-else\n                                        class="sw-data-grid__actions-menu"\n                                >\n                                    <slot\n                                            name="actions"\n                                            :item="item"\n                                            :itemIndex="itemIndex"\n                                    >\n                                        {% block sw_data_grid_slot_actions %}{% endblock %}\n                                    </slot>\n                                </sw-context-button>\n                                <slot\n                                        name="action-modals"\n                                        :item="item"\n                                >\n                                    {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                                </slot>\n                            </div>\n                        </td>\n                    </tr>\n                    </tbody>\n\n                    <sw-data-grid-skeleton\n                            v-else\n                            :show-selection="showSelection"\n                            :show-actions="showActions"\n                            :current-columns="currentColumns"\n                            :has-resize-columns="hasResizeColumns"\n                            :item-amount="skeletonItemAmount"\n                            class="sw-data-grid__body"\n                    />\n                </table>\n            </template>\n        </sw-collapse>\n\n        <sw-collapse class="pending-collapse" v-if="pendingItems">\n            <template #header>Pending ({{ pendingItems.length }})</template>\n            <template #content>\n                <table ref="table"\n                       class="sw-data-grid__table">\n                    <thead v-if="showHeader"\n                           class="sw-data-grid__header">\n                    <tr class="sw-data-grid__row">\n                        <th\n                                v-if="showSelection"\n                                class="is-select-all sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection"\n                        >\n                            {% block sw_data_grid_header_cell_selection_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_select_all_checkbox %}\n                                        <sw-checkbox-field\n                                                v-if="records && records.length > 0"\n                                                :disabled="isSelectAllDisabled"\n                                                class="sw-data-grid__select-all"\n                                                :value="allSelectedChecked"\n                                                @change="selectAll"\n                                        />\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n\n                        <th\n                                v-for="(column, columnIndex) in currentColumns"\n                                v-show="column.visible"\n                                :key="`${column.property}-${columnIndex}`"\n                                ref="column"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property"\n                                :class="getHeaderCellClasses(column, columnIndex)"\n                                :style="{ width: column.width, minWidth: column.width }"\n                                @click="onClickHeaderCell($event, column)"\n                        >\n\n                            {% block sw_data_grid_header_columns_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    <slot\n                                            :name="`column-label-${column.property}`"\n                                            v-bind="{ column, columnIndex }"\n                                    >\n\n                                        {% block sw_data_grid_header_columns_icon %}\n                                            <sw-icon\n                                                    v-if="column.iconLabel"\n                                                    :name="column.iconLabel"\n                                            >\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </sw-icon>\n                                        {% endblock %}\n\n                                        {% block sw_data_grid_header_columns_label %}\n                                            <template v-else>\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </template>\n                                        {% endblock %}\n                                    </slot>\n\n                                    {% block sw_data_grid_column_actions %}\n                                        <sw-context-button\n                                                v-if="allowColumnEdit && !isInlineEditActive"\n                                                class="sw-data-grid__action-edit-column"\n                                        >\n                                            {% block sw_data_grid_column_actions_hide %}\n                                                <sw-context-menu-item\n                                                        :disabled="column.primary"\n                                                        variant="danger"\n                                                        @click="hideColumn(columnIndex)"\n                                                >\n                                                    {{ $tc(\'global.sw-data-grid.labelColumnHide\') }}\n                                                </sw-context-menu-item>\n                                            {% endblock %}\n                                        </sw-context-button>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_sort_indicator %}\n                                        <span\n                                                v-if="column.sortable && currentSortBy === column.dataIndex"\n                                                class="sw-data-grid__sort-indicator"\n                                        >\n                                {% block sw_data_grid_sort_indicator_transition %}\n                                    <transition\n                                            name="sort-indicator"\n                                            mode="out-in"\n                                    >\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\n                                        <sw-icon\n                                                v-if="currentSortDirection === \'ASC\'"\n                                                key="ASC"\n                                                name="small-arrow-small-up"\n                                                size="16px"\n                                        />\n                                    {% endblock %}\n\n                                        {% block sw_data_grid_sort_indicator_icon_desc %}\n                                            <sw-icon\n                                                    v-else\n                                                    key="DESC"\n                                                    name="small-arrow-small-down"\n                                                    size="16px"\n                                            />\n                                        {% endblock %}\n                                </transition>\n                                {% endblock %}\n                            </span>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_data_grid_header_columns_resize %}\n                                <span\n                                        v-if="column.allowResize"\n                                        class="sw-data-grid__cell-resize"\n                                        @mousedown="onStartResize($event, column, columnIndex)"\n                                ></span>\n                            {% endblock %}\n                        </th>\n\n                        <th\n                                v-if="hasResizeColumns"\n                                aria-hidden="true"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </th>\n\n                        <th\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings"\n                                :class="{ \'is--loading\': loading }"\n                        >\n                            {% block sw_data_grid_header_cell_actions_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_settings %}\n                                        <sw-data-grid-settings\n                                                v-if="showSettings"\n                                                :columns="currentColumns"\n                                                :compact="compact"\n                                                :previews="previews"\n                                                :enable-previews="hasPreviewSlots"\n                                                :disabled="isInlineEditActive"\n                                                @change-compact-mode="onChangeCompactMode"\n                                                @change-preview-images="onChangePreviews"\n                                                @change-column-visibility="onChangeColumnVisibility"\n                                                @change-column-order="onChangeColumnOrder"\n                                        >\n                                            {% block sw_data_grid_settings_additional_settings %}\n                                                <template #additionalSettings>\n                                                    {% block sw_data_grid_settings_additional_settings_inner %}\n                                                        <slot name="additionalSettings"></slot>\n                                                    {% endblock %}\n                                                </template>\n                                            {% endblock %}\n                                        </sw-data-grid-settings>\n\n                                        {% block sw_data_grid_settings_custom_settings %}\n                                            <slot name="customSettings">\n                                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\n                                            </slot>\n                                        {% endblock %}\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n                    </tr>\n                    </thead>\n\n                    <tbody v-if="!loading"\n                           class="sw-data-grid__body">\n\n                    <tr v-for="(item, itemIndex) in pendingItems"\n                        :key="item.id"\n                        class="sw-data-grid__row"\n                        :class="getRowClasses(item, itemIndex)">\n\n\n                        <td v-if="showSelection"\n                            class="sw-data-grid__cell sw-data-grid__cell--selection">\n                            <slot name="selection-content"\n                                  v-bind="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }">\n                                <div class="sw-data-grid__cell-content">\n                                    <sw-checkbox-field v-if="canDelete(item)"\n                                            :disabled="!isRecordSelectable(item)"\n                                            :value="isSelected(item[itemIdentifierProperty])"\n                                            @change="selectItem($event, item)"\n                                    />\n                                </div>\n                            </slot>\n                        </td>\n\n                        <td v-for="(column, columnIndex) in currentColumns"\n                            v-show="column.visible"\n                            :key="`${item.id}-${columnIndex}`"\n                            class="sw-data-grid__cell"\n                            :class="getCellClasses(column)"\n                            @dblclick="onDbClickCell(item)">\n\n                            <div class="sw-data-grid__cell-content">\n\n                                <slot v-if="previews && !isInlineEdit(item)"\n                                      :name="`preview-${column.property}`"\n                                      v-bind="{ item, column, compact }"\n                                ></slot>\n\n                                <slot :name="`column-${column.property}`"\n                                      v-bind="{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')) }">\n                                    <template v-if="column.inlineEdit === \'boolean\'">\n                                        <sw-data-grid-column-boolean\n                                                v-model="item[column.property]"\n                                                :is-inline-edit="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')"\n                                        />\n                                    </template>\n                                    <template v-else>\n                                        <template v-if="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')">\n                                            <sw-data-grid-inline-edit\n                                                    :column="column"\n                                                    :compact="compact"\n                                                    :value="item[column.property]"\n                                                    @input="item[column.property] = $event"\n                                            />\n                                        </template>\n\n                                        <template v-else>\n                                            <router-link\n                                                    v-if="column.routerLink"\n                                                    class="sw-data-grid__cell-value"\n                                                    :to="{ name: column.routerLink, params: { id: item.id } }"\n                                            >\n                                                {{ renderColumn(item, column) }}\n                                            </router-link>\n                                            <span v-else class="sw-data-grid__cell-value">\n                                                                                {{ renderColumn(item, column) }}\n                                                                            </span>\n                                        </template>\n                                    </template>\n                                </slot>\n                            </div>\n                        </td>\n                        <td v-if="hasResizeColumns"\n                            aria-hidden="true"\n                            class="sw-data-grid__cell sw-data-grid__cell-spacer"\n                            @dblclick="onDbClickCell(item)"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </td>\n\n                        <td\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--actions"\n                        >\n                            <div class="sw-data-grid__cell-content">\n\n                                <template v-if="isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]">\n\n                                    <sw-button\n                                            class="sw-data-grid__inline-edit-cancel"\n                                            size="x-small"\n                                            :title="$tc(\'global.default.cancel\')"\n                                            :aria-label="$tc(\'global.default.cancel\')"\n                                            square\n                                            @click="onClickCancelInlineEdit(item)"\n                                    >\n                                        <sw-icon\n                                                name="small-default-x-line-small"\n                                                size="14px"\n                                        />\n\n                                    </sw-button>\n\n                                    <sw-button\n                                            class="sw-data-grid__inline-edit-save"\n                                            variant="primary"\n                                            size="x-small"\n                                            :title="$tc(\'global.default.save\')"\n                                            :aria-label="$tc(\'global.default.save\')"\n                                            square\n                                            @click="onClickSaveInlineEdit(item)"\n                                    >\n\n                                        <sw-icon\n                                                name="small-default-checkmark-line-small"\n                                                size="14px"\n                                        />\n                                    </sw-button>\n                                </template>\n\n                                <sw-context-button\n                                        v-else\n                                        class="sw-data-grid__actions-menu"\n                                >\n                                    <slot\n                                            name="actions"\n                                            :item="item"\n                                            :itemIndex="itemIndex"\n                                    >\n                                        {% block sw_data_grid_slot_actions %}{% endblock %}\n                                    </slot>\n                                </sw-context-button>\n                                <slot\n                                        name="action-modals"\n                                        :item="item"\n                                >\n                                    {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                                </slot>\n                            </div>\n                        </td>\n                    </tr>\n                    </tbody>\n\n                    <sw-data-grid-skeleton\n                            v-else\n                            :show-selection="showSelection"\n                            :show-actions="showActions"\n                            :current-columns="currentColumns"\n                            :has-resize-columns="hasResizeColumns"\n                            :item-amount="skeletonItemAmount"\n                            class="sw-data-grid__body"\n                    />\n                </table>\n            </template>\n        </sw-collapse>\n    </div>\n{% endblock %}'},"2FdZ":function(n,e,t){"use strict";t.r(e);var l=t("1jbx"),i=t.n(l),a=(t("/k7a"),Shopware.Component),s=Shopware.Data.Criteria;a.extend("od-entity-listing","sw-entity-listing",{template:i.a,props:{items:{type:Array,required:!0},itemIdentifierProperty:{type:String,required:!1,default:"id"},preSelection:{type:Object,required:!1,default:null},isGroupedView:{type:Boolean,required:!1,default:!1},jobTypes:{type:Array,required:!1,default:function(){return[]}},autoReloadInterval:{type:Number,required:!1,default:function(){return 0}},autoLoadIsActive:{type:Boolean,required:!1,default:!1}},computed:{jobRepository:function(){return this.repositoryFactory.create("od_scheduler_job")}},data:function(){return{records:this.items,selection:Object.assign({},this.preSelection||{}),successItems:!1,pendingItems:!1,errorItems:!1,reloadInterval:null}},watch:{autoLoadIsActive:function(){this._handleAutoReload(this.autoLoadIsActive)},isGroupedView:function(){this._createGroupedView(this.isGroupedView)}},methods:{_handleAutoReload:function(n){var e=this;n&&this.autoLoadIsActive&&this.autoReloadInterval>0?this.reloadInterval=setInterval((function(){e.updateList()}),this.autoReloadInterval):clearInterval(this.reloadInterval)},_createGroupedView:function(n){n&&(this._getSuccessItems(),this._getErrorItems(),this._getPendingItems())},_getSuccessItems:function(){var n=this,e=new s;return e.addFilter(s.equals("parentId",null)),e.addFilter(s.equals("status","succeed")),e.addSorting(s.sort("createdAt","DESC",!1)),e.setLimit(9999999),e.addAssociation("messages"),e.addAssociation("subJobs"),this.jobTypes!==[]&&e.addFilter(s.equalsAny("type",this.jobTypes)),this.jobRepository.search(e,Shopware.Context.api).then((function(e){n.successItems=e}))},_getErrorItems:function(){var n=this,e=new s;return e.addFilter(s.equals("parentId",null)),e.addFilter(s.equals("status","error")),e.addSorting(s.sort("createdAt","DESC",!1)),e.setLimit(9999999),e.addAssociation("messages"),this.jobTypes!==[]&&e.addFilter(s.equalsAny("type",this.jobTypes)),this.jobRepository.search(e,Shopware.Context.api).then((function(e){n.errorItems=e}))},_getPendingItems:function(){var n=this,e=new s;return e.addFilter(s.equals("parentId",null)),e.addFilter(s.equals("status","pending")),e.addSorting(s.sort("createdAt","DESC",!1)),e.setLimit(9999999),e.addAssociation("messages"),this.jobTypes!==[]&&e.addFilter(s.equalsAny("type",this.jobTypes)),this.jobRepository.search(e,Shopware.Context.api).then((function(e){n.pendingItems=e}))},canDelete:function(n){return-1!==["error","succeed"].indexOf(n.status)},selectAll:function(n){var e=this;this.$delete(this.selection),this.records.forEach((function(t){e.isSelected(t[e.itemIdentifierProperty])!==n&&e.selectItem(n,t)})),this.$emit("select-all-items",this.selection)},selectItem:function(n,e){if(this.canDelete(e)){var t=this.selection;n?this.$set(this.selection,e[this.itemIdentifierProperty],e):!n&&t[e[this.itemIdentifierProperty]]&&this.$delete(this.selection,e[this.itemIdentifierProperty]),this.$emit("select-item",this.selection,e,n)}}},beforeDestroy:function(){clearInterval(this.reloadInterval)}});var o=t("1+Xl"),d=t.n(o);Shopware.Component.register("od-job-status-badge",{template:d.a,props:{status:{type:String,required:!0}},computed:{additionalClass:function(){return"running"===this.status?"--pulse":""},variant:function(){switch(this.status){case"error":return"error";case"succeed":case"running":return"success";default:return""}}}});var c=t("B7I1"),r=t.n(c);t("p1Xt");function u(n,e){var t="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=function(n,e){if(!n)return;if("string"==typeof n)return m(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);"Object"===t&&n.constructor&&(t=n.constructor.name);if("Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return m(n,e)}(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var l=0,i=function(){};return{s:i,n:function(){return l>=n.length?{done:!0}:{done:!1,value:n[l++]}},e:function(n){throw n},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,o=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return s=n.done,n},e:function(n){o=!0,a=n},f:function(){try{s||null==t.return||t.return()}finally{if(o)throw a}}}}function m(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,l=new Array(e);t<e;t++)l[t]=n[t];return l}var _=Shopware.Component,b=Shopware.Data.Criteria;_.register("od-job-listing-index",{template:r.a,inject:["OdRescheduleService","repositoryFactory"],mixins:["notification"],props:{autoReloadInterval:{type:Number,required:!1,default:function(){return 0}},autoLoadIsActive:{type:Boolean,required:!1,default:!1},isGroupedView:{type:Boolean,required:!1,default:!1},jobTypes:{type:Array,required:!1,default:function(){return[]}}},watch:{autoLoadIsActive:function(){this._handleAutoReload(this.autoLoadIsActive)}},computed:{jobRepository:function(){return this.repositoryFactory.create("od_scheduler_job")},messageRepository:function(){return this.repositoryFactory.create("od_scheduler_job_message")},columns:function(){return[{property:"name",label:this.$tc("job-listing.page.listing.grid.column.name"),allowResize:!0,width:"500px"},{property:"status",label:this.$tc("job-listing.page.listing.grid.column.status"),allowResize:!0,width:"150px"},{property:"startedAt",label:this.$tc("job-listing.page.listing.grid.column.started-at"),allowResize:!0,width:"170px"},{property:"finishedAt",label:this.$tc("job-listing.page.listing.grid.column.finished-at"),allowResize:!0,width:"170px"},{property:"createdAt",label:this.$tc("job-listing.page.listing.grid.column.created-at"),allowResize:!0,width:"170px"},{property:"subJobs",label:"Sub jobs",allowResize:!0,width:"250px",visible:!0,sortable:!1},{property:"messages",label:"Messages",allowResize:!0,width:"350px",visible:!0,sortable:!1}]}},created:function(){this.createdComponent()},data:function(){return{jobItems:null,isLoading:!1,reloadInterval:null}},methods:{createdComponent:function(){this.getList()},_handleAutoReload:function(n){var e=this;n&&this.autoReloadInterval>0?this.reloadInterval=setInterval((function(){e.updateList()}),this.autoReloadInterval):clearInterval(this.reloadInterval)},pageChange:function(){this.$emit("stop-auto-loading"),clearInterval(this.reloadInterval)},getLinkParams:function(n){return{id:n.id,backPath:this.$route.name}},updateList:function(){var n=this,e=new b;return e.addFilter(b.equals("parentId",null)),e.addSorting(b.sort("createdAt","DESC",!1)),e.addAssociation("messages"),e.addAssociation("subJobs"),this.jobTypes!==[]&&e.addFilter(b.equalsAny("type",this.jobTypes)),this.jobRepository.search(e,Shopware.Context.api).then((function(e){n.jobItems=e}))},getMessagesCount:function(n,e){if("info"===e){var t,l=0,i=u(n.messages);try{for(i.s();!(t=i.n()).done;){"info-message"===t.value.type&&l++}}catch(n){i.e(n)}finally{i.f()}return l}if("warning"===e){var a,s=0,o=u(n.messages);try{for(o.s();!(a=o.n()).done;){"warning-message"===a.value.type&&s++}}catch(n){o.e(n)}finally{o.f()}return s}if("error"===e){var d,c=0,r=u(n.messages);try{for(r.s();!(d=r.n()).done;){"error-message"===d.value.type&&c++}}catch(n){r.e(n)}finally{r.f()}return c}},getChildrenCount:function(n,e){if("succeed"===e){var t,l=0,i=u(n.subJobs);try{for(i.s();!(t=i.n()).done;){"succeed"===t.value.status&&l++}}catch(n){i.e(n)}finally{i.f()}return l}if("pending"===e){var a,s=0,o=u(n.subJobs);try{for(o.s();!(a=o.n()).done;){"pending"===a.value.status&&s++}}catch(n){o.e(n)}finally{o.f()}return s}if("error"===e){var d,c=0,r=u(n.subJobs);try{for(r.s();!(d=r.n()).done;){"error"===d.value.status&&c++}}catch(n){r.e(n)}finally{r.f()}return c}},getList:function(){var n=this;this.isLoading=!0,this.updateList().then((function(){n.isLoading=!1}))},onRefresh:function(){this.getList()},canReschedule:function(n){return"error"===n.status},canDelete:function(n){return-1!==["error","succeed"].indexOf(n.status)},onDeleteJob:function(n){var e=this;this.jobRepository.delete(n,Shopware.Context.api).then((function(){e.updateList()}))},rescheduleJob:function(n){var e=this;this.OdRescheduleService.rescheduleJob(n).then((function(){e.createNotificationSuccess({message:"Job has been rescheduled successfully."}),e.updateList()})).catch((function(){e.createNotificationError({message:"Unable reschedule job."})}))}},beforeDestroy:function(){clearInterval(this.reloadInterval)}});var g=t("kg/q"),p=t.n(g),w=(t("ht3K"),Shopware.Component),h=Shopware.Data.Criteria;w.register("od-job-detail-index",{template:p.a,inject:["OdRescheduleService","repositoryFactory"],mixins:["notification"],props:{jobId:{type:String,required:!1,default:null}},metaInfo:function(){return{title:this.$createTitle()}},data:function(){return{parentRoute:null,jobItem:null,jobChildren:null,jobMessages:null,currentJobMessages:null,displayedLog:null,moduleData:this.$route.meta.$module}},computed:{jobRepository:function(){return this.repositoryFactory.create("od_scheduler_job")},jobMessagesRepository:function(){return this.repositoryFactory.create("od_scheduler_job_message")},jobChildrenColumns:function(){return this.getJobChildrenColumns()},jobMessagesColumns:function(){return this.getJobMessagesColumns()},backPath:function(){return void 0===this.$route.params.backPath?null:{name:this.$route.params.backPath}}},created:function(){this.initPageData()},mounted:function(){this.$route.params.parentPath&&(this.parentRoute=this.$route.params.parentPath)},methods:{initPageData:function(){var n=this;this.jobRepository.get(this.jobId,Shopware.Context.api,new h).then((function(e){n.jobItem=e})).then((function(){n.getJobChildren().then((function(){n.getJobMessages()}))}))},getJobChildren:function(){var n=this,e=new h;return e.addFilter(h.equalsAny("parentId",[this.jobId])),e.addSorting(h.sort("createdAt","ASC",!1)),this.jobRepository.search(e,Shopware.Context.api).then((function(e){n.jobChildren=e}))},getJobChildrenColumns:function(){return[{property:"name",dataIndex:"name",label:this.$tc("job-listing.page.listing.grid.column.name"),allowResize:!1,align:"right",inlineEdit:!0,width:"90px"},{property:"status",dataIndex:"status",label:this.$tc("job-listing.page.listing.grid.column.status"),allowResize:!1,align:"right",inlineEdit:!0,width:"90px"},{property:"startedAt",dataIndex:"startedAt",label:this.$tc("job-listing.page.listing.grid.column.started-at"),allowResize:!1,align:"right",inlineEdit:!0,width:"90px"},{property:"finishedAt",dataIndex:"finishedAt",label:this.$tc("job-listing.page.listing.grid.column.finished-at"),allowResize:!0,align:"right",inlineEdit:!0,width:"90px"},{property:"createdAt",dataIndex:"createdAt",label:this.$tc("job-listing.page.listing.grid.column.created-at"),allowResize:!0,align:"right",inlineEdit:!0,width:"90px"}]},getJobMessages:function(){var n=this,e=new h,t=this.jobChildren?this.jobChildren.map((function(n){return n.id})):[];return e.addFilter(h.equalsAny("jobId",t.concat([this.jobId]))),e.addSorting(h.sort("createdAt","ASC",!1)),this.jobMessagesRepository.search(e,Shopware.Context.api).then((function(e){n.jobMessages=e}))},getJobMessagesColumns:function(){return[{property:"message",dataIndex:"message",label:this.$tc("job-listing.page.listing.grid.column.message"),allowResize:!1,align:"left",width:"90px"}]},canReschedule:function(n){return"error"===n.status},canShowJobMessages:function(n){return Object.values(this.jobMessages).filter((function(e){return e.jobId===n})).length>0},rescheduleJob:function(n){var e=this;this.OdRescheduleService.rescheduleJob(n).then((function(){e.createNotificationSuccess({message:"Job has been rescheduled successfully."}),e.initPageData()})).catch((function(){e.createNotificationError({message:"Unable reschedule job."})}))},showMessageModal:function(n){this.currentJobMessages=Object.values(this.jobMessages).filter((function(e){return e.jobId===n})),this.displayedLog=!0},closeModal:function(){this.displayedLog=!1}}});var v=t("+tzr");function f(n){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function k(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function y(n,e){for(var t=0;t<e.length;t++){var l=e[t];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(n,l.key,l)}}function I(n,e){return(I=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}function j(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,l=x(n);if(e){var i=x(this).constructor;t=Reflect.construct(l,arguments,i)}else t=l.apply(this,arguments);return C(this,t)}}function C(n,e){return!e||"object"!==f(e)&&"function"!=typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function x(n){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}Shopware.Module.register("od-job-listing",{type:"plugin",title:"job-listing.general.title",description:"job-listing.general.description",color:"#F88962",icon:"default-avatar-multiple",snippets:{"en-GB":v},routes:{detail:{component:"od-job-detail-index",path:"detail/:id/back/:backPath",props:{default:function(n){return{jobId:n.params.id}}}}}});var S=Shopware.Classes.ApiService,$=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&I(n,e)}(a,n);var e,t,l,i=j(a);function a(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"od-job";return k(this,a),i.call(this,n,e,t)}return e=a,(t=[{key:"rescheduleJob",value:function(n){var e=this.getBasicHeaders();return this.httpClient.post("_action/".concat(this.getApiBasePath(),"/reschedule"),{params:{jobId:n},headers:e}).then((function(n){return S.handleResponse(n)}))}}])&&y(e.prototype,t),l&&y(e,l),a}(S),A=Shopware.Application,E=A.getContainer("init");A.addServiceProvider("OdRescheduleService",(function(n){return new $(E.httpClient,n.loginService)}))},B7I1:function(n,e){n.exports='<od-entity-listing\n        v-if="jobItems"\n        :items="jobItems"\n        :repository="jobRepository"\n        :is-loading="isLoading"\n        :showSelection="true"\n        :allowColumnEdit="false"\n        :allowDelete="true"\n        :allowEdit="false"\n        :autoLoadIsActive="autoLoadIsActive"\n        :autoReloadInterval="autoReloadInterval"\n        :jobTypes="jobTypes"\n        :isGroupedView="isGroupedView"\n        @page-change="pageChange"\n        :columns="columns">\n    <template #column-status="{ item }">\n        {% block od_job_list_grid_job_status_link %}\n            <template>\n                <od-job-status-badge :status="item.status"></od-job-status-badge>\n                {{ $tc(\'job-listing.page.listing.grid.job-status.\' + item.status) }}\n            </template>\n        {% endblock %}\n    </template>\n    <template #column-name="{ item }">\n        {% block od_job_list_grid_job_name_link %}\n            <router-link :to="{ name: \'od.job.listing.detail\', params: getLinkParams(item) }">\n                {{ item.name }}\n            </router-link>\n        {% endblock %}\n    </template>\n    <template #column-startedAt="{ item }">\n        {% block od_job_list_grid_job_started_date %}\n            {{ item.startedAt|date() }}\n        {% endblock %}\n    </template>\n    <template #column-finishedAt="{ item }">\n        {% block od_job_list_grid_job_finished_date %}\n            {{ item.finishedAt|date() }}\n        {% endblock %}\n    </template>\n    <template #column-createdAt="{ item }">\n        {% block od_job_list_grid_job_created_date %}\n            {{ item.createdAt|date() }}\n        {% endblock %}\n    </template>\n    <template #column-subJobs="{ item }">\n        {% block od_job_list_grid_job_sub_jobs %}\n            <div class="sub-jobs-counters-container jobs-info-counter">\n                <div class="count-container" v-if="item.subJobs">\n                <span class="info-container">\n                    <span class="count" v-html="getChildrenCount(item, \'succeed\')"></span>\n                </span>\n                    <od-job-status-badge status="succeed"></od-job-status-badge>\n                </div>\n\n                <div class="count-container" v-if="item.subJobs">\n                    <span class="warning-container">\n                        <span class="count" v-html="getChildrenCount(item, \'pending\')"></span>\n                    </span>\n                    <od-job-status-badge status="pending"></od-job-status-badge>\n                </div>\n\n                <div class="count-container" v-if="item.subJobs">\n                <span class="error-counter">\n                    <span class="count" v-html="getChildrenCount(item, \'error\')"></span>\n                </span>\n                    <od-job-status-badge status="error"></od-job-status-badge>\n                </div>\n            </div>\n        {% endblock %}\n    </template>\n    <template #column-messages="{ item }">\n        {% block od_job_list_grid_job_messages %}\n            <div class="message-counters-container jobs-info-counter">\n                <div class="count-container" v-if="item.messages">\n                <span class="info-counter">\n                    <span class="count" v-html="getMessagesCount(item, \'info\')"></span>\n                </span>\n                    <sw-icon :small="true" name="default-badge-info" color="#3498db"></sw-icon>\n                </div>\n\n                <div class="count-container" v-if="item.messages">\n                    <span class="warning-counter">\n                        <span class="count" v-html="getMessagesCount(item, \'warning\')"></span>\n                    </span>\n                    <sw-icon :small="true" name="default-badge-warning" color="#f39c12"></sw-icon>\n                </div>\n\n                <div class="count-container" v-if="item.messages">\n                <span class="error-counter">\n                    <span class="count" v-html="getMessagesCount(item, \'error\')"></span>\n                </span>\n                    <sw-icon :small="true" name="default-badge-error" color="#c0392b"></sw-icon>\n                </div>\n            </div>\n        {% endblock %}\n    </template>\n    <template #actions="{ item }">\n        <sw-context-menu-item :router-link="{ name: \'od.job.listing.detail\', params: getLinkParams(item) }">\n            {{ $tc(\'job-listing.actions.view-job.button.label\') }}\n        </sw-context-menu-item>\n        <sw-context-menu-item :disabled="!canReschedule(item)"\n                              @click="rescheduleJob(item.id)">\n            {{ $tc(\'job-listing.actions.reschedule-job.button.label\') }}\n        </sw-context-menu-item>\n        <sw-context-menu-item class="sw-context-menu-item--danger"\n                              :disabled="!canDelete(item)"\n                              @click="onDeleteJob(item.id)">\n            {{ $tc(\'job-listing.actions.delete-job.button.label\') }}\n        </sw-context-menu-item>\n    </template>\n</od-entity-listing>\n'},SZ7m:function(n,e,t){"use strict";function l(n,e){for(var t=[],l={},i=0;i<e.length;i++){var a=e[i],s=a[0],o={id:n+":"+i,css:a[1],media:a[2],sourceMap:a[3]};l[s]?l[s].parts.push(o):t.push(l[s]={id:s,parts:[o]})}return t}t.r(e),t.d(e,"default",(function(){return b}));var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},s=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,d=0,c=!1,r=function(){},u=null,m="data-vue-ssr-id",_="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function b(n,e,t,i){c=t,u=i||{};var s=l(n,e);return g(s),function(e){for(var t=[],i=0;i<s.length;i++){var o=s[i];(d=a[o.id]).refs--,t.push(d)}e?g(s=l(n,e)):s=[];for(i=0;i<t.length;i++){var d;if(0===(d=t[i]).refs){for(var c=0;c<d.parts.length;c++)d.parts[c]();delete a[d.id]}}}}function g(n){for(var e=0;e<n.length;e++){var t=n[e],l=a[t.id];if(l){l.refs++;for(var i=0;i<l.parts.length;i++)l.parts[i](t.parts[i]);for(;i<t.parts.length;i++)l.parts.push(w(t.parts[i]));l.parts.length>t.parts.length&&(l.parts.length=t.parts.length)}else{var s=[];for(i=0;i<t.parts.length;i++)s.push(w(t.parts[i]));a[t.id]={id:t.id,refs:1,parts:s}}}}function p(){var n=document.createElement("style");return n.type="text/css",s.appendChild(n),n}function w(n){var e,t,l=document.querySelector("style["+m+'~="'+n.id+'"]');if(l){if(c)return r;l.parentNode.removeChild(l)}if(_){var i=d++;l=o||(o=p()),e=f.bind(null,l,i,!1),t=f.bind(null,l,i,!0)}else l=p(),e=k.bind(null,l),t=function(){l.parentNode.removeChild(l)};return e(n),function(l){if(l){if(l.css===n.css&&l.media===n.media&&l.sourceMap===n.sourceMap)return;e(n=l)}else t()}}var h,v=(h=[],function(n,e){return h[n]=e,h.filter(Boolean).join("\n")});function f(n,e,t,l){var i=t?"":l.css;if(n.styleSheet)n.styleSheet.cssText=v(e,i);else{var a=document.createTextNode(i),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(a,s[e]):n.appendChild(a)}}function k(n,e){var t=e.css,l=e.media,i=e.sourceMap;if(l&&n.setAttribute("media",l),u.ssrId&&n.setAttribute(m,e.id),i&&(t+="\n/*# sourceURL="+i.sources[0]+" */",t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},duW9:function(n,e,t){},ht3K:function(n,e,t){var l=t("duW9");"string"==typeof l&&(l=[[n.i,l,""]]),l.locals&&(n.exports=l.locals);(0,t("SZ7m").default)("fa44e7b6",l,!0,{})},imT3:function(n,e,t){},"kg/q":function(n,e){n.exports='{% block od_job_detail_page %}\n    <sw-page v-if="jobId && jobItem" class="od-job-detail">\n        {% block job_detail_header %}\n            <template #smart-bar-header>\n                {% block job_detail_header_title %}\n                    <h2>\n                        {{ jobItem.name }}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        <template slot="smart-bar-back">\n            <router-link v-if="backPath"\n                         class="smart-bar__back-btn"\n                         :to="backPath"\n                         :style="{ \'color\': moduleData.color }">\n                <sw-icon name="default-arrow-head-left" small></sw-icon>\n            </router-link>\n        </template>\n\n        {% block job_detail_actions %}\n            <template #smart-bar-actions>\n                <sw-button\n                        :disabled="!canReschedule(jobItem)"\n                        @click="rescheduleJob(jobId)"\n                        class="od-job-detail__smart-bar-edit-button"\n                        variant="primary"\n                >\n                    {{ $tc(\'job-listing.actions.reschedule-job.button.label\') }}\n                </sw-button>\n                <sw-button\n                        v-if="jobMessages !== null"\n                        :disabled="!canShowJobMessages(jobItem.id)"\n                        @click="showMessageModal(jobId)"\n                        class="od-job-detail__smart-bar-edit-button"\n                        variant="primary"\n                >\n                    {{ $tc(\'job-listing.actions.show-messages.button.label\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n        {% block job_detail_content %}\n            <template #content>\n                <sw-card class="od-job-detail-card">\n                    {% block job_row_primary %}\n                        <sw-card-section>\n                            {% block job_detail_base_overview_columns %}\n                                <sw-container\n                                        columns="repeat(auto-fit, minmax(250px, 1fr))"\n                                        gap="30px 30px">\n                                    {% block job_detail_base_overview_left_column %}\n                                        <sw-description-list\n                                                columns="1fr"\n                                                grid="1fr">\n                                            {% block job_detail_base_overview_name %}\n                                                <dt>{{ $tc(\'job-listing.page.listing.grid.column.name\') }}</dt>\n                                                <dd>\n                                                    <sw-order-inline-field v-if="jobItem.name"\n                                                                           :display-value="jobItem.name"\n                                                                           :value="jobItem.name"\n                                                                           :editable="false"\n                                                    />\n                                                </dd>\n                                            {% endblock %}\n                                            {% block job_detail_base_overview_status %}\n                                                <dt>{{ $tc(\'job-listing.page.listing.grid.column.status\') }}</dt>\n                                                <dd>\n                                                    <template>\n                                                        <od-job-status-badge :status="jobItem.status">\n                                                        </od-job-status-badge>\n                                                        {{ $tc(\'job-listing.page.listing.grid.job-status.\' + jobItem.status) }}\n                                                    </template>\n                                                </dd>\n                                            {% endblock %}\n                                            {% block job_detail_base_overview_startedAt %}\n                                                <dt>{{ $tc(\'job-listing.page.listing.grid.column.started-at\') }}</dt>\n                                                <dd>\n                                                    <sw-order-inline-field v-if="jobItem.startedAt"\n                                                                           :display-value="jobItem.startedAt|date()"\n                                                                           :value="jobItem.startedAt|date()"\n                                                                           :editable="false"\n                                                    />\n                                                </dd>\n                                            {% endblock %}\n                                        </sw-description-list>\n                                    {% endblock %}\n                                    {% block od_job_detail_base_job_overview_right_column %}\n                                        <sw-description-list\n                                                columns="1fr"\n                                                grid="1fr" class="od-job-user-card__summary-vertical">\n                                            {% block job_detail_base_overview_type %}\n                                                <dt>{{ $tc(\'job-listing.page.listing.grid.column.type\') }}</dt>\n                                                <dd>\n                                                    <sw-order-inline-field v-if="jobItem.type"\n                                                                           :display-value="jobItem.type"\n                                                                           :value="jobItem.type"\n                                                                           :editable="false"\n                                                    />\n                                                </dd>\n                                            {% endblock %}\n                                            {% block job_detail_base_overview_createdAt %}\n                                                <dt>{{ $tc(\'job-listing.page.listing.grid.column.created-at\') }}</dt>\n                                                <dd>\n                                                    <sw-order-inline-field v-if="jobItem.createdAt"\n                                                                           :display-value="jobItem.createdAt|date()"\n                                                                           :value="jobItem.startedAt|date()"\n                                                                           :editable="false"/>\n                                                </dd>\n                                            {% endblock %}\n                                            {% block job_detail_base_overview_finishedAt %}\n                                                <dt>{{ $tc(\'job-listing.page.listing.grid.column.finished-at\') }}</dt>\n                                                <dd>\n                                                    <sw-order-inline-field v-if="jobItem.finishedAt"\n                                                                           :display-value="jobItem.finishedAt|date()"\n                                                                           :value="jobItem.finishedAt|date()"\n                                                                           :editable="false"/>\n                                                </dd>\n                                            {% endblock %}\n                                        </sw-description-list>\n                                    {% endblock %}\n                                </sw-container>\n                            {% endblock %}\n                        </sw-card-section>\n                    {% endblock %}\n                </sw-card>\n                <div class="sub-job-container" v-if="(jobChildren && jobChildren.total > 0)">\n                    {% block job_children_listing %}\n                        <sw-data-grid\n                                v-if="jobChildren"\n                                :items="jobChildren"\n                                :data-source="jobChildren"\n                                :repository="jobRepository"\n                                :showSelection="false"\n                                :allowColumnEdit="false"\n                                :allowDelete="false"\n                                :allowEdit="false"\n                                :columns="jobChildrenColumns">\n                            <template #column-name="{ item }">\n                                {% block job_list_grid_job_name_link %}\n                                    {{ item.name }}\n                                {% endblock %}\n                            </template>\n                            <template #column-status="{ item }">\n                                {% block job_list_grid_job_status_link %}\n                                    <template>\n                                        <od-job-status-badge :status="item.status"></od-job-status-badge>\n                                        {{ $tc(\'job-listing.page.listing.grid.job-status.\' + item.status) }}\n                                    </template>\n                                {% endblock %}\n                            </template>\n\n                            <template #column-startedAt="{ item }">\n                                {% block job_list_grid_job_started_at %}\n                                    {{ item.startedAt|date() }}\n                                {% endblock %}\n                            </template>\n                            <template #column-finishedAt="{ item }">\n                                {% block job_list_grid_job_finished_at %}\n                                    {{ item.finishedAt|date() }}\n                                {% endblock %}\n                            </template>\n                            <template #column-createdAt="{ item }">\n                                {% block job_list_grid_job_created_at %}\n                                    {{ item.createdAt|date() }}\n                                {% endblock %}\n                            </template>\n                            <template #actions="{ item }">\n                                <sw-context-menu-item :disabled="!canReschedule(item)"\n                                                      @click="rescheduleJob(item.id)">\n                                    {{ $tc(\'job-listing.actions.reschedule-job.button.label\') }}\n                                </sw-context-menu-item>\n                                <sw-context-menu-item v-if="jobMessages !== null"\n                                                      :disabled="!canShowJobMessages(item.id)"\n                                                      @click="showMessageModal(item.id)">\n                                    {{ $tc(\'job-listing.actions.show-messages.button.label\') }}\n                                </sw-context-menu-item>\n                            </template>\n                        </sw-data-grid>\n                    {% endblock %}\n                </div>\n                <sw-modal v-if="displayedLog"\n                          :title="$tc(\'job-listing.page.listing.grid.message-modal.label\')"\n                          @modal-close="closeModal"\n                          class="job_list_grid_job_messages-modal">\n                    {% block job_messages_listing %}\n                        <sw-data-grid\n                                v-if="currentJobMessages"\n                                :items="currentJobMessages"\n                                :data-source="currentJobMessages"\n                                :showSelection="false"\n                                :allowColumnEdit="false"\n                                :allowDelete="false"\n                                :allowEdit="false"\n                                :showActions="false"\n                                :showHeader="false"\n                                class="od-job-messages-grid"\n                                :columns="jobMessagesColumns">\n                            <template #column-message="{ item }">\n                                {% block job_list_grid_job_messages %}\n                                    <div class="job_list_grid_job_messages-information" style="width:100%;">\n                                        <sw-alert\n                                                v-if="item.type == \'info-message\'"\n                                                variant="info"\n                                                appearance="default"\n                                                :showIcon="true"\n                                                :closable="false">\n                                            {{ item.message }}\n                                        </sw-alert>\n                                        <sw-alert\n                                                v-if="item.type == \'error-message\'"\n                                                variant="error"\n                                                appearance="default"\n                                                :showIcon="true"\n                                                :closable="false">\n                                            {{ item.message }}\n                                        </sw-alert>\n                                        <sw-alert\n                                                v-if="item.type == \'warning-message\'"\n                                                variant="warning"\n                                                appearance="default"\n                                                :showIcon="true"\n                                                :closable="false">\n                                            {{ item.message }}\n                                        </sw-alert>\n                                    </div>\n                                {% endblock %}\n                            </template>\n                        </sw-data-grid>\n                    {% endblock %}\n                </sw-modal>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n'},liS9:function(n,e,t){},p1Xt:function(n,e,t){var l=t("imT3");"string"==typeof l&&(l=[[n.i,l,""]]),l.locals&&(n.exports=l.locals);(0,t("SZ7m").default)("5c1b4b0a",l,!0,{})}});